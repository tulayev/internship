@model SendVM

<div class="mt-4">
    <form asp-action="Chat" asp-controller="Home" method="post">
        <input asp-for="@Model.User.Id" type="hidden" />
        <input asp-for="@Model.User.Name" type="hidden" />
        <input asp-for="@Model.Message.From" value="@Model.User.Name" type="hidden" />
        <div class="w-1/2 mx-auto">
            <h2 class="text-4xl mb-4">Hi, <b>@Model.User.Name!</b></h2>
            <div class="mb-4">
                <div>
                    <div id="names" class="flex flex-wrap mb-2"></div>
                    <label for="search" class="block text-gray-700 font-bold mb-2">Recepient Name</label>
                    <input 
                        type="text" 
                        id="search" 
                        class="shadow appearance-none border rounded w-full mb-2 py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                    />
                </div>
                <div id="matchList"></div>
            </div>
            <div class="mb-4">
                <label asp-for="@Model.Message.Title" class="block text-gray-700 font-bold mb-2"></label>
                <input 
                    asp-for="@Model.Message.Title" 
                    type="text" 
                    class="shadow appearance-none border rounded w-full mb-2 py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" 
                    required
                />
                <span asp-validation-for="@Model.Message.Title" class="block text-red-600 text-sm"></span>
                <label asp-for="@Model.Message.Body" class="block text-gray-700 font-bold mb-2"></label>
                <textarea 
                    asp-for="@Model.Message.Body"
                    class="shadow appearance-none border rounded w-full mb-2 py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" 
                ></textarea>
            </div>
            <div>
                <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline" type="submit">
                    Send
                </button>
            </div>
        </div>
    </form>
</div>

<div class="w-1/2 mx-auto pt-6">
    <h3 class="mb-6 text-2xl font-bold text-center">Messages</h3>
    <div id="messageBox"></div>
</div>

@section Scripts {

<script>

    const search = document.getElementById('search')
    const matchList = document.getElementById('matchList')
    const names = document.getElementById('names')

    const searchNames = async searchText => {
        const res = await fetch('/home/users')
        const users = await res.json()

        let matches = users.data.filter(u => {
            const regex = new RegExp(`^${searchText}`, 'gi')
            return u.name.match(regex)
        })

        if (searchText.length === 0) {
            matches = []
            matchList.innerHTML = ''
        }

        outputHtml(matches)
    }

    const outputHtml = (matches) => {
        if (matches.length > 0) {
            const html = matches.map(match => `
                <p class="userNames cursor-pointer px-4 py-2 rounded-lg bg-green-500 text-white inline-block">${match.name}</p>
            `).join('')

            matchList.innerHTML = html

            const userNames = document.querySelectorAll('.userNames')
            addUnique(userNames)
        }
    }

    const addUnique = (userNames) => {
        userNames.forEach(i => {
            i.addEventListener('click', (e) => {
                const input = `<input type="text" name="names" value="${i.innerText}" readonly class="block w-1/6 mr-2 bg-blue-500 text-white text-center font-bold py-2 px-4 rounded" />`
                names.innerHTML += input
                search.value = ''
                searchNames(search.value)
            })
        })
    }

    search.addEventListener('input', () => searchNames(search.value))

    const messageBox = document.getElementById('messageBox')

    const fetchMessages = async() => {
        const urlString = window.location.href
        const url = new URL(urlString)
        const param = url.searchParams.get('name')

        try{
            const res = await fetch(`/home/messages?name=${param}`)
            const user = await res.json()  
            const data = user.data.messageUsers

            data.sort((a, b) => b.id - a.id)

            messageBox.innerHTML = ''
            
            data.map(d => {
                messageBox.innerHTML += `
                <div class="mb-4">
                    <h4 class="text-lg font-medium text-center">${d.message.title}</h4>
                    <p>${d.message.body}</p>
                </div>
                `
            })
        } catch(e) {
            console.log(e.message)
        }
    }

    fetchMessages()

    setInterval(async () => {
        fetchMessages()    
    }, 2000)

</script>

}